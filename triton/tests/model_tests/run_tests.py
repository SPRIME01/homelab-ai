#!/usr/bin/env python3
# ...existing code...

def run_tests(
    models: List[str] = None,
    url: str = "localhost:8000",
    output_dir: str = "test_results",
    config_file: str = None,
    kubernetes: bool = False,
    namespace: str = "ai",
    service: str = "triton-inference-server",
    generate_junit: bool = False
) -> bool:
    # ...existing code...

    # Create test suite
    suite = unittest.TestSuite()
    for model_name, test_class in test_classes.items():
        # Create test suite for this model
        model_suite = unittest.TestLoader().loadTestsFromTestCase(test_class)
        suite.addTests(model_suite)

    # Run tests
    if generate_junit:
        try:
            import xmlrunner
            runner = xmlrunner.XMLTestRunner(
                output=os.path.join(output_dir, "junit-xml"),
                verbosity=2
            )
        except ImportError:
            logger.warning("xmlrunner not found. Install it with: pip install unittest-xml-reporting")
            runner = unittest.TextTestRunner(verbosity=2)
    else:
        runner = unittest.TextTestRunner(verbosity=2)

    result = runner.run(suite)

    # Generate summary report
    summary = {
        "timestamp": time.time(),
        "total_tests": result.testsRun,
        "failures": len(result.failures),
        "errors": len(result.errors),
        "skipped": len(getattr(result, 'skipped', [])),
        "success": result.wasSuccessful(),
        "models_tested": list(test_classes.keys())
    }

    # Save summary to file
    summary_path = os.path.join(output_dir, "test_summary.json")
    with open(summary_path, 'w') as f:
        json.dump(summary, f, indent=2)

    logger.info(f"Test summary saved to {summary_path}")

    # Generate HTML summary report
    generate_html_summary(summary, test_classes, output_dir)

    return result.wasSuccessful()

def generate_html_summary(summary: Dict, test_classes: Dict, output_dir: str):
    """Generate HTML summary report."""
    html_path = os.path.join(output_dir, "test_summary.html")

    with open(html_path, 'w') as f:
        f.write("""<!DOCTYPE html>
<html>
<head>
    <title>Triton Model Tests Summary</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; max-width: 1200px; margin: 0 auto; }
        h1, h2, h3 { color: #333; }
        .summary { background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .success { color: green; }
        .failure { color: red; }
        table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
    </style>
</head>
<body>
    <h1>Triton Model Tests Summary</h1>
    <div class="summary">
        <p><strong>Date:</strong> """ + time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(summary["timestamp"])) + """</p>
        <p><strong>Total Tests:</strong> """ + str(summary["total_tests"]) + """</p>
        <p><strong>Status:</strong> <span class=\"""" + ("success" if summary["success"] else "failure") + """\">""" + ("PASSED" if summary["success"] else "FAILED") + """</span></p>
        <p><strong>Failures:</strong> """ + str(summary["failures"]) + """</p>
        <p><strong>Errors:</strong> """ + str(summary["errors"]) + """</p>
        <p><strong>Skipped:</strong> """ + str(summary["skipped"]) + """</p>
    </div>

    <h2>Models Tested</h2>
    <table>
        <tr>
            <th>Model</th>
            <th>Test Class</th>
            <th>Report</th>
        </tr>
""")

        # Add rows for each model
        for model_name in sorted(summary["models_tested"]):
            test_class = test_classes.get(model_name, "Unknown")
            report_path = f"{model_name}_test_report.html"

            f.write(f"""
        <tr>
            <td>{model_name}</td>
            <td>{test_class.__name__ if isinstance(test_class, type) else str(test_class)}</td>
            <td><a href="{report_path}">View Report</a></td>
        </tr>""")

        f.write("""
    </table>

    <footer>
        <p>Generated by Triton Model Testing Framework</p>
    </footer>
</body>
</html>
""")

    logger.info(f"HTML summary report generated: {html_path}")

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Triton Model Test Runner")

    parser.add_argument("--models", nargs="+", help="Model names to test (space separated)")
    parser.add_argument("--url", default="localhost:8000", help="Triton server URL")
    parser.add_argument("--output-dir", default="test_results", help="Directory for test outputs")
    parser.add_argument("--config-file", help="Path to config file")
    parser.add_argument("--kubernetes", action="store_true", help="Use Kubernetes")
    parser.add_argument("--namespace", default="ai", help="Kubernetes namespace")
    parser.add_argument("--service", default="triton-inference-server", help="Triton service name in Kubernetes")
    parser.add_argument("--junit", action="store_true", help="Generate JUnit XML report")

    return parser.parse_args()

if __name__ == "__main__":
    # Parse arguments
    args = parse_arguments()

    # Run tests
    success = run_tests(
        models=args.models,
        url=args.url,
        output_dir=args.output_dir,
        config_file=args.config_file,
        kubernetes=args.kubernetes,
        namespace=args.namespace,
        service=args.service,
        generate_junit=args.junit
    )

    # Set exit code based on test result
    sys.exit(0 if success else 1)
